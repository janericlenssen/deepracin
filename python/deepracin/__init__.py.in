from ctypes import *
import platform
import numpy as np
import tempfile
import shutil
import errno
import os
import sys
dir = os.path.dirname(__file__)

if platform.system()=='Windows':
    filename = os.path.join(dir, '${CMAKE_INSTALL_PREFIX}/lib/deepracin/deepracin.dll')
elif platform.system()=='Linux':
    filename = os.path.join(dir, '${CMAKE_INSTALL_PREFIX}/lib/deepracin/libdeepracin.so')

else:
    print("Not a known Platform!")
    exit()
lib = cdll.LoadLibrary(filename)

# Structure Definitions
class Shape2(Structure):
    _fields_ = [("s0", c_int), ("s1", c_int)]


class Shape3(Structure):
    _fields_ = [("s0", c_int), ("s1", c_int), ("s2", c_int)]


class Shape4(Structure):
    _fields_ = [("s0", c_int), ("s1", c_int), ("s2", c_int), ("s3", c_int)]


# deepRacin C function definitions

# dR_NewGraph
func = lib.dR_NewGraph
func.restype = c_void_p

# dR_cleanup
func = lib.dR_cleanup
func.argtypes = [c_void_p,c_bool]
func.restype = c_void_p

# dR_Datafeednode
func = lib.dR_Datafeednode
func.argtypes = [c_void_p,c_void_p]
func.restype = c_void_p

# dR_config
func = lib.dR_config
func.argtypes = [c_void_p, c_char_p, c_bool, c_bool, c_bool, c_bool, c_char_p]
func.restype = None

# dR_initCL
func = lib.dR_initCL
func.argtypes = [c_void_p]
func.restype = c_bool

# dR_getClEnvironmentFrom (not implemented)
#func = lib.dR_getClEnvironmentFrom
#func.argtypes = [c_void_p,c_void_p]
#func.restype = None

# dR_prepare
func = lib.dR_prepare
func.argtypes = [c_void_p]
func.restype = c_bool

# dR_getOutputShape
func = lib.dR_getOutputShape
func.argtypes = [c_void_p]
func.restype = c_void_p

# dR_apply
func = lib.dR_apply
func.argtypes = [c_void_p]
func.restype = c_bool

# dR_getOutputBuffers
func = lib.dR_getOutputBuffers
func.argtypes = [c_void_p,c_void_p]
func.restype = c_int

# dR_downloadArray
func = lib.dR_downloadArray
func.argtypes = [c_void_p, c_char_p, c_void_p, c_int, c_int, c_void_p]
func.restype = c_bool

# dR_setAsOutput
func = lib.dR_setAsOutput
func.argtypes = [c_void_p,c_void_p]
func.restype = c_bool

# dR_feedData
func = lib.dR_feedData
func.argtypes = [c_void_p,c_void_p, c_void_p, c_int, c_int]
func.restype = None

# dR_loadGraph
func = lib.dR_loadGraph
func.argtypes = [c_void_p, c_char_p, c_void_p, c_void_p, c_void_p, c_void_p]
func.restype = c_void_p

# dR_saveGraph
func = lib.dR_saveGraph
func.argtypes = [c_void_p,c_char_p]
func.restype = c_bool

# dR_printNetObject
func = lib.dR_printNetObject
func.argtypes = [c_void_p,c_char_p]
func.restype = None

# dR_Conv2d
func = lib.dR_Conv2d
func.argtypes = [c_void_p, c_void_p, c_void_p, c_void_p, c_int, c_bool]
func.restype = c_void_p

# dR_Conv2d_setVariables
func = lib.dR_Conv2d_setVariables
func.argtypes = [c_void_p, c_void_p, c_void_p]
func.restype = None

# dR_Conv2dTransposed (not implemented)
#func = lib.dR_Conv2dTransposed
#func.argtypes = [c_void_p, c_void_p, c_void_p, c_void_p, c_int, c_bool]
#func.restype = c_void_p

# dR_Conv2dtransposed_setVariables (not implemented)
#func = lib.dR_Conv2dtransposed_setVariables
#func.argtypes = [c_void_p, c_void_p, c_void_p]
#func.restype = None

# dR_FullyConnected
func = lib.dR_FullyConnected
func.argtypes = [c_void_p, c_void_p, c_void_p, c_int, c_bool]
func.restype = c_void_p

# dR_FullyConnected_setVariables
func = lib.dR_FullyConnected_setVariables
func.argtypes = [c_void_p, c_void_p, c_void_p]
func.restype = None

# dR_MaskDependentFilter
func = lib.dR_MaskDependentFilter
func.argtypes = [c_void_p, c_void_p, c_void_p, c_void_p]
func.restype = c_void_p

# dR_MaskDependentFilter_setVariables
func = lib.dR_MaskDependentFilter_setVariables
func.argtypes = [c_void_p, c_void_p, c_void_p]
func.restype = None

# dR_PerPixelFilter
func = lib.dR_PerPixelFilter
func.argtypes = [c_void_p, c_void_p, c_void_p, c_void_p, c_void_p]
func.restype = c_void_p

# dR_ElemWise1Operation
func = lib.dR_ElemWise1Operation
func.argtypes = [c_void_p, c_void_p, c_int, c_float]
func.restype = c_void_p

# dR_ElemWise2Operation
func = lib.dR_ElemWise2Operation
func.argtypes = [c_void_p, c_void_p, c_void_p, c_int]
func.restype = c_void_p

# dR_Softmax
func = lib.dR_Softmax
func.argtypes = [c_void_p, c_void_p]
func.restype = c_void_p

# dR_ResolveRoI
func = lib.dR_ResolveRoI
func.argtypes = [c_void_p, c_void_p, c_void_p]
func.restype = c_void_p

# dR_RGB2gray
func = lib.dR_RGB2gray
func.argtypes = [c_void_p, c_void_p]
func.restype = c_void_p

# dR_Upscaling
func = lib.dR_Upscaling
func.argtypes = [c_void_p, c_void_p, c_int, c_int, c_int]
func.restype = c_void_p

# dR_LabelCreation
func = lib.dR_LabelCreation
func.argtypes = [c_void_p, c_void_p, c_int, c_float, c_float, c_float]
func.restype = c_void_p

# dR_Normalization
func = lib.dR_Normalization
func.argtypes = [c_void_p, c_void_p, c_int, c_float, c_float]
func.restype = c_void_p

# dR_Pooling
func = lib.dR_Pooling
func.argtypes = [c_void_p,c_void_p, c_void_p, c_void_p, c_int]
func.restype = c_void_p

# dR_Slice
func = lib.dR_Slice
func.argtypes = [c_void_p,c_void_p, c_void_p, c_void_p]
func.restype = c_void_p

# dR_CropOrPad
func = lib.dR_CropOrPad
func.argtypes = [c_void_p, c_void_p, c_void_p]
func.restype = c_void_p

# dR_Concat
func = lib.dR_Concat
func.argtypes = [c_void_p, c_void_p, c_int, c_int]
func.restype = c_void_p



elemwise_2op_dict = { 'Add' : 0,
             'Sub': 1,
             'Mul': 2,
             'Div': 3,
             'Pow': 4}

elemwise_1op_dict = { 'AddS' : 0,
             'SubS': 1,
             'MulS': 2,
             'DivS': 3,
             'Log': 4,
             'Exp': 5,
             'Sqrt': 6,
             'Fill': 7,
             'PowS': 8}

act_dict = { 'linear' : 0,
             'relu': 1}

pool_dict = { 'max' : 0,
             'average': 1}

us_dict = { 'nearest_neighbor' : 0,
             'linear': 1,
             'bicubic': 2}

norm_dict = { 'target_mean' : 0,
             'target_stddev': 1,
             'target_mean_stddev': 2}


class Node:
    def __init__(self, ptr, graph, desc, params, variables=None):
        self.ptr = ptr
        self.out_shape = [0, 0, 0]
        self.graph = graph
        self.shape = [-1, -1, -1]
        self.desc = desc
        self.params = params
        self.variables = variables
        graph.nodes.append(self)

    def __add__(self, other):
        if isinstance(other,float):
            return Add_Scalar(self, other)
        elif isinstance(other,Node):
            return Add(self, other)
        else:
            raise NotImplementedError("Add with other type than float or Node not supported")

    def __sub__(self, other):
        if isinstance(other,float):
            return Sub_Scalar(self, other)
        elif isinstance(other,Node):
            return Sub(self, other)
        else:
            raise NotImplementedError("Add with other type than float or Node not supported")

    def __mul__(self, other):
        if isinstance(other,float):
            return Mul_Scalar(self, other)
        elif isinstance(other,Node):
            return Mul(self, other)
        else:
            raise NotImplementedError("Add with other type than float or Node not supported")

    def __rdiv__(self, other):
        if isinstance(other,float):
            return Div_Scalar(self, other)
        elif isinstance(other,Node):
            return Div(self, other)
        else:
            raise NotImplementedError("Add with other type than float or Node not supported")

    def __pow__(self, power, modulo=None):
        if isinstance(power,float):
            return Pow_Scalar(self, power)
        elif isinstance(power,Node):
            return Pow(self, power)
        else:
            raise NotImplementedError("Add with other type than float or Node not supported")

    def __getitem__(self, item):
        slices = None
        if isinstance(item, tuple):
            if all((type(i) is slice or type(i) is int) for i in item) and len(item) == 3:
                slices = [item[0], item[1], item[2]]

        if slices is not None:
            for k,i in enumerate(slices):
                if isinstance(i, int):
                    slices[k] = slice(i, i+1, None)

        if slices is None or any((i.step is not None or i.start is None) for i in slices):
            raise ValueError('DR Error: Way of indexing not allowed!')


        origin = [slices[0].start,slices[1].start,slices[2].start]
        shape = [slices[0].stop-slices[0].start,slices[1].stop-slices[1].start,slices[2].stop-slices[2].start]

        return Slice(self,origin,shape)


class Graph:
    def __init__(self,id, layout, env):
        self.ptr = lib.dR_NewGraph()
        self.num_outputs = 0
        self.outnodes = []
        self.id = id
        self.layout = layout
        self.nodes = []
        self.feed_nodes = []
        self.model_path = None
        self.env = env
        


class Environment:
    def __init__(self, preferred_platform=''):
        self.preferred_platform_name = preferred_platform

    def __enter__(self):
        self.silent = True
        self.debuginfo = False
        self.profileCPU = False
        self.profileGPU = False
        self.tmp_path = tempfile.mkdtemp(prefix='deepracin_')
        self.model_path = self.tmp_path
        self.graphs = []
        self.graph_with_cl_context = -1
        self.id_counter = 0
        return self

    def __exit__(self, type, value, traceback):
        print("Cleaning up temp-path...")
        try:
            import shutil
            shutil.rmtree(self.tmp_path)  # delete directory
        except OSError as exc:
            if exc.errno != errno.ENOENT:  # ENOENT - no such file or directory
                raise  # re-raise exception
        print("done...")
        for i,graph in enumerate(self.graphs):
            if i == len(self.graphs)-1:
                print("Cleaning up Graph...")
                lib.dR_cleanup(c_void_p(graph.ptr),True)
            else:
                lib.dR_cleanup(c_void_p(graph.ptr),False)
        return

    # Create a new graph
    def create_graph(self, interface_layout):
        graph_id = self.id_counter
        self.id_counter+=1
        graph = Graph(graph_id,interface_layout, self)
        self.graphs.append(graph)
        return graph

# general functions

# Create a graph node that can be fed with data
def feed_node(graph, shape):
    if not len(shape)==3:
        sys.exit("DR Error: feed_node()'s shape parameter needs to be a list with 3 ints!")
    if not (isinstance(shape[0], int ) and isinstance(shape[1], int) and isinstance(shape[2], int)):
        sys.exit("DR Error: feed_node()'s shape parameter needs to be a list with 3 ints!")
    dr_shape = [shape[1],shape[0],shape[2]]
    if graph.layout == 'WHC':
        dr_shape = [shape[0],shape[1],shape[2]]
    elif graph.layout == 'CHW':
        dr_shape = [shape[2],shape[1],shape[0]]
    elif graph.layout == 'HWC':
        dr_shape = [shape[1],shape[0],shape[2]]
    else:
        raise NotImplementedError("DR Error: Graphs's layout "+graph.layout+" not supported!")
    desc = 'DataFeedNode'
    params = [dr_shape[0],dr_shape[1],dr_shape[2]]
    sh = Shape3(dr_shape[0],dr_shape[1],dr_shape[2])
    node = Node(lib.dR_Datafeednode(c_void_p(graph.ptr), pointer(sh)),graph,desc,params)
    graph.feed_nodes.append(node)
    return node

# Initializes and prepares a fully defined graph
def prepare(graph):
    ret = True
    env = graph.env
    if env.graph_with_cl_context == -1:
        platformname = create_string_buffer(str.encode(env.preferred_platform_name))

        if graph.model_path is not None:
            model_path = graph.model_path
        else:
            model_path = env.model_path

        if not os.path.exists(env.model_path):
            os.makedirs(env.model_path)

        model_dir = create_string_buffer(str.encode(model_path))

        lib.dR_config(c_void_p(graph.ptr),platformname,c_bool(env.silent),c_bool(env.debuginfo),c_bool(env.profileGPU),c_bool(env.profileCPU),model_dir)
        ret &= lib.dR_initCL(c_void_p(graph.ptr))
        env.graph_with_cl_context = graph.id

        if not ret:
            raise RuntimeError("DR Error: deepRACIN initCL failed!")
    else:
        lib.dR_getClEnvironmentFrom(c_void_p(graph.ptr), env.graphs[env.graph_with_cl_context].ptr)

    ret &= lib.dR_prepare(c_void_p(graph.ptr))
    for node in graph.outnodes:
        ArrayType = c_int*3
        shape = cast(lib.dR_getOutputShape(c_void_p(node.ptr)), POINTER(ArrayType)).contents
        node.out_shape = [shape[0],shape[1],shape[2]]
    for feednode in graph.feed_nodes:
        ArrayType = c_int*3
        shape = cast(lib.dR_getOutputShape(c_void_p(feednode.ptr)), POINTER(ArrayType)).contents
        feednode.shape = [shape[0],shape[1],shape[2]]
    if not ret:
        raise RuntimeError("DR Error: deepRACIN prepare failed!")
    return

# Runs the graph - after that, data can be fetched from output arrays
def apply(graph):
    ret = lib.dR_apply(c_void_p(graph.ptr))
    if not ret:
        raise RuntimeError("DR Error: deepRACIN apply failed!")
    memptr = (c_void_p * graph.num_outputs)()
    lib.dR_getOutputBuffers(c_void_p(graph.ptr), memptr)
    out = []
    for i in range(graph.num_outputs):
        out_shape = graph.outnodes[i].out_shape
        strbuf = create_string_buffer(str.encode("output"+str(i)))
        dataptr = (c_float * (out_shape[0]*out_shape[1]*out_shape[2]))()
        lib.dR_downloadArray(c_void_p(graph.ptr), strbuf, memptr[i], 0, out_shape[0]*out_shape[1]*out_shape[2]*4, dataptr)
        #arr = np.ctypeslib.as_array(dataptr)
        arr = np.frombuffer(dataptr, dtype=np.float32)
        arr = arr.reshape([out_shape[2],out_shape[1],out_shape[0]])
        if graph.layout == 'WHC':
            arr = arr.transpose([2, 1, 0])
        elif graph.layout == 'HWC':
            arr = arr.transpose([1, 2, 0])

        out.append(np.squeeze(arr))
    return out


def mark_as_output(node):
    lib.dR_setAsOutput(c_void_p(node.graph.ptr), c_void_p(node.ptr))
    node.graph.num_outputs += 1
    node.graph.outnodes.append(node)
    return


def feed_data(node, data):
    if not len(data.shape) == 3 :
        raise TypeError("DR Error: data fed to a feed_node needs to be an array with 3 dimensions!")
    if data.dtype!=np.float32:
        raise TypeError("DR Error: data fed to a feed_node is "+str(data.dtype)+" but needs to be an array of type float32!")

    dr_shape = [data.shape[1],data.shape[0],data.shape[2]]
    if node.graph.layout == 'WHC':
        dr_shape = [data.shape[0],data.shape[1],data.shape[2]]
        data = data.transpose([2, 1, 0]).copy()
    elif node.graph.layout == 'CHW':
        dr_shape = [data.shape[2],data.shape[1],data.shape[0]]
    elif node.graph.layout == 'HWC':
        dr_shape = [data.shape[1],data.shape[0],data.shape[2]]
        data = data.transpose([2, 0, 1]).copy()

    if not dr_shape==node.shape:
        raise ValueError("DR Error: data array's dimensions '+str(dr_shape)+' do not match node's dimensions '+str(node.shape)+'!")

    d = np.ctypeslib.as_ctypes(data)
    l = dr_shape[0]*dr_shape[1]*dr_shape[2]
    lib.dR_feedData(c_void_p(node.graph.ptr), c_void_p(node.ptr), d, 0, l)
    return

def load_graph(graph,path):
    if not isinstance(path,str):
        raise TypeError("DR Error: Load graph needs graph folder path!")
    graph.model_path = path
    num_nodes = c_int(0)
    num_feed_nodes = c_int(0)
    nodesptr = pointer(c_void_p())
    feednodesptr = pointer(c_void_p())
    pathbuf = create_string_buffer(str.encode(path))
    outnodeptr = lib.dR_loadGraph(c_void_p(graph.ptr), pathbuf, byref(nodesptr),byref(num_nodes), byref(feednodesptr),byref(num_feed_nodes))
    if outnodeptr is None:
        raise RuntimeError("DR Error: Model could not be loaded!")

    nodelist = [Node(nodesptr[i],graph, None, None) for i in range(num_nodes.value)]
    feednodelist = [Node(feednodesptr[i],graph, None, None) for i in range(num_feed_nodes.value)]
    graph.feed_nodes = feednodelist

    return nodelist, feednodelist

def load_graph_old(node,path):
    if not isinstance(path,str):
        raise TypeError("DR Error: Load graph needs graph folder path!")
    maxnumofnodes = 50
    maxnodes = c_int(maxnumofnodes)
    nodeptr = (c_void_p * maxnumofnodes)()
    pathbuf = create_string_buffer(str.encode(path))
    outnodeptr = lib.dR_loadGraph(c_void_p(node.graph.ptr), c_void_p(node.ptr), pathbuf, byref(nodeptr),byref(maxnodes))
    if outnodeptr is None:
        raise RuntimeError("DR Error: Model could not be loaded!")
    outnode = Node(outnodeptr, node.graph, None, None)
    outlist = [Node(nodeptr[i],node.graph, None, None) for i in range(maxnodes.value)]
    return outnode, outlist

def save_graph(graph,path):
    #if not isinstance(path,str):
    #    raise TypeError("DR Error: Save graph needs graph folder path!")
    pathbuf = create_string_buffer(str.encode(path))
    res = lib.dR_saveGraph(c_void_p(graph.ptr), pathbuf)
    if not res:
        raise RuntimeError("DR Error: Model could not be saved!")
    return

def print_graph(graph):
    lib.dR_printNetObject(c_void_p(graph.ptr), None)

# Specific Node Functions

def Conv2d(input_node, shape, stride, activation, weights, biases=None):

    if not (shape[0] == shape[1] and shape[0]%2 == 1):
        raise TypeError("DR Error: Conv2d' currently only supports quadratic filter sizes with odd side length!")
    if not (stride[0] == stride[3] == 1 and stride[1] == stride[2]):
        raise TypeError("DR Error: Conv2d' currently only strides of from (1,x,x,1)!")
    if biases is not None:
        use_bias = True
    else:
        use_bias = False
    if not isinstance(activation,str):
        raise ValueError("DR Error: Activation parameter needs to be 'max' or 'average!")

    # deepRacin expects [C,F,H,W] conv2d weights
    # transpose [H,W,C,F] -> [C,F,H,W]
    if weights is not None:
        weights = weights.transpose([2,3,0,1]).copy()

    # Description for python structures
    desc = 'Conv2D'
    params = [act_dict[activation], (1 if use_bias else 0),shape[0],shape[1],shape[2],shape[3],stride[0],stride[1],stride[2],stride[3]]
    if use_bias:
        variables = [weights,biases]
    else:
        variables = [weights]
    sh = Shape4(shape[0],shape[1],shape[2],shape[3])
    st = Shape4(stride[0],stride[1],stride[2],stride[3])
    # Call deepRACIN
    onode = Node(lib.dR_Conv2d(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), pointer(sh), pointer(st),
                               act_dict[activation], use_bias),input_node.graph, desc, params, variables)
    if weights is not None and biases is not None:
        lib.dR_Conv2d_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(weights), np.ctypeslib.as_ctypes(biases))
    elif weights is not None and biases is None:
        lib.dR_Conv2d_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(weights), None)
    return onode


'''
Not supported yet!
def Conv2d_Transposed(input_node : Node, shape : (int, int, int, int), stride : (int, int, int, int), activation : str, weights, biases=None):

    if not (shape[0] == shape[1] and shape[0]%2 == 1):
        raise ValueError("Error: Conv2d_Transposed' currently only supports quadratic filter sizes with odd side length!")
    if not (stride[0] == stride[3] == 1 and stride[1] == stride[2]):
        raise ValueError('Error: Conv2d_Transposed' currently only strides of from (1,x,x,1)!')
    if biases is not None:
        use_bias = True
    else:
        use_bias = False
    onode =  Node(lib.dR_Conv2dTransposed(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), Shape4(*shape), Shape4(*stride), act_dict[activation], use_bias),input_node.graph)
    if weights is not None and biases is not None:
        lib.dR_Conv2dtransposed_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(weights), np.ctypeslib.as_ctypes(biases))
    elif weights is not None and biases is None:
        lib.dR_Conv2dtransposed_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(weights), 0)
    return onode
'''

def Fully_Connected(input_node, shape, activation, weights, biases=None):
    # type: (Node, (int,int), str, numpy.ndarray, numpy.ndarray) -> Node
    if biases is not None:
        use_bias = True
    else:
        use_bias = False

    # Description for python structures
    desc = 'FullyConnected'
    params = [act_dict[activation], (1 if use_bias else 0),shape[0],shape[1]]
    if use_bias:
        variables = [weights,biases]
    else:
        variables = [weights]

    sh = Shape2(shape[0],shape[1])
    # Call deepRACIN
    onode = Node(lib.dR_FullyConnected(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), pointer(sh), act_dict[activation],
                                       use_bias),input_node.graph, desc, params, variables)

    if weights is not None and biases is not None:
        lib.dR_FullyConnected_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(weights), np.ctypeslib.as_ctypes(biases))
    elif weights is not None and biases is None:
        lib.dR_FullyConnected_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(weights), 0)

    return onode

def Mask_Dependent_Filter(input_node, filter_mask, shape, filters):
    # type: (Node, Node, (int,int,int), numpy.ndarray) -> Node
    if input_node.graph != filter_mask.graph:
        raise ValueError("DR Error: Inputs for Mask_Dependent_Filter are not in the same graph!")

    # Description for python structures
    desc = 'MaskDependentFilter'
    params = [shape[0],shape[1],shape[2]]
    variables = [filters]

    sh = Shape3(shape[0],shape[1],shape[2])
    # Call deepRACIN
    onode = Node(lib.dR_MaskDependentFilter(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),filter_mask.ptr,
                                            pointer(sh)),input_node.graph, desc, params, variables)
    lib.dR_MaskDependentFilter_setVariables(c_void_p(onode.ptr), np.ctypeslib.as_ctypes(filters), None)
    return onode

def Per_Pixel_Filter(input_node, input_filters, shape, stride):
    # type: (Node, Node, (int,int,int, int), (int, int, int, int)) -> Node
    # Description for python structures
    desc = 'PPFilter'
    params = [shape[0], shape[1], shape[2], shape[3], stride[0], stride[1], stride[2], stride[3]]

    sh = Shape4(shape[0],shape[1],shape[2],shape[3])
    st = Shape4(stride[0],stride[1],stride[2],stride[3])
    # Call deepRACIN
    onode = Node(lib.dR_PerPixelFilter(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),input_filters.ptr, pointer(st),
                                       pointer(st)),input_node.graph, desc, params)
    return onode

def Add_Scalar(input_node, scalar):
    # type: (Node, float) -> Node
    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['AddS'], scalar]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['AddS'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Sub_Scalar(input_node, scalar):
    # type: (Node, float) -> Node
    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['SubS'], scalar]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['SubS'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Mul_Scalar(input_node, scalar):
    # type: (Node, float) -> Node
    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['MulS'], scalar]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['MulS'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Div_Scalar(input_node, scalar):
    # type: (Node, float) -> Node
    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['DivS'], scalar]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['DivS'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Log(input_node):
    # type: (Node) -> Node
    # Description for python structures
    scalar = 0.0
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['Log']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['Log'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Exp(input_node):
    # type: (Node) -> Node
    scalar = 0.0

    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['Exp']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['Exp'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Sqrt(input_node):
    # type: (Node) -> Node
    scalar = 0.0

    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['Sqrt']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['Sqrt'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Fill(input_node, scalar):
    # type: (Node, float) -> Node
    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['Fill'], scalar]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['Fill'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Pow_Scalar(input_node, scalar):
    # type: (Node, float) -> Node
    # Description for python structures
    desc = 'ElemWise1Op'
    params = [elemwise_1op_dict['PowS'], scalar]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise1Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr),elemwise_1op_dict['PowS'],
                                           c_float(scalar)),input_node.graph, desc, params)
    return onode

def Add(input_node1, input_node2):
    # type: (Node, Node) -> Node
    if input_node1.graph != input_node2.graph:
        raise ValueError("DR Error: Inputs for Add are not in the same graph!")

    # Description for python structures
    desc = 'ElemWise2Op'
    params = [elemwise_2op_dict['Add']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise2Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node1.ptr), c_void_p(input_node2.ptr),
                                           elemwise_2op_dict['Add']), input_node1.graph, desc, params)
    return onode

def Sub(input_node1, input_node2):
    # type: (Node, Node) -> Node
    if input_node1.graph != input_node2.graph:
        raise ValueError("DR Error: Inputs for Add are not in the same graph!")

    # Description for python structures
    desc = 'ElemWise2Op'
    params = [elemwise_2op_dict['Sub']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise2Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node1.ptr), c_void_p(input_node2.ptr),
                                           elemwise_2op_dict['Sub']), input_node1.graph, desc, params)
    return onode

def Mul(input_node1, input_node2):
    # type: (Node, Node) -> Node
    if input_node1.graph != input_node2.graph:
        raise ValueError("DR Error: Inputs for Mul are not in the same graph!")

    # Description for python structures
    desc = 'ElemWise2Op'
    params = [elemwise_2op_dict['Mul']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise2Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node1.ptr), c_void_p(input_node2.ptr),
                                           elemwise_2op_dict['Mul']), input_node1.graph, desc, params)
    return onode

def Div(input_node1, input_node2):
    # type: (Node, Node) -> Node
    if input_node1.graph != input_node2.graph:
        raise ValueError("DR Error: Inputs for Mul are not in the same graph!")

    # Description for python structures
    desc = 'ElemWise2Op'
    params = [elemwise_2op_dict['Div']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise2Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node1.ptr), c_void_p(input_node2.ptr),
                                           elemwise_2op_dict['Div']), input_node1.graph, desc, params)
    return onode

def Pow(input_node1, input_node2):
    # type: (Node, Node) -> Node
    if input_node1.graph != input_node2.graph:
        raise ValueError("DR Error: Inputs for Mul are not in the same graph!")

    # Description for python structures
    desc = 'ElemWise2Op'
    params = [elemwise_2op_dict['Pow']]

    # Call deepRACIN
    onode = Node(lib.dR_ElemWise2Operation(c_void_p(input_node.graph.ptr), c_void_p(input_node1.ptr), c_void_p(input_node2.ptr),
                                           elemwise_2op_dict['Pow']), input_node1.graph, desc, params)
    return onode

def Softmax(input_node):
    # type: (Node) -> Node
    # Description for python structures
    desc = 'Softmax'
    params = [' ']

    # Call deepRACIN
    onode = Node(lib.dR_Softmax(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr)),input_node.graph, desc, params)
    return onode

def Resolve_RoI(input_node, shape):
    # type: (Node, (int, int, int)) -> Node
    # Description for python structures
    desc = 'ResolveRoI'
    params = [shape[0], shape[1], shape[2]]

    sh = Shape3(shape[0],shape[1],shape[2])
    # Call deepRACIN
    onode = Node(lib.dR_ResolveRoI(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), pointer(sh)),input_node.graph, desc, params)
    return onode

def RGB_to_gray(input_node):
    # type: (Node) -> Node
    # Description for python structures
    desc = 'RGB2Gray'
    params = [' ']

    # Call deepRACIN
    onode = Node(lib.dR_RGB2gray(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr)),input_node.graph, desc, params)
    return onode

def Upscaling(input_node, upscaling_type, scale_factor_x, scale_factor_y):
    # type: (Node, str, int, int) -> Node
    # Description for python structures
    desc = 'Upscaling'
    if us_dict[upscaling_type]>1:
        raise NotImplementedError("DR Error: For Upscaling Node, currently only nearest_neighbor and linear supported!")
    params = [us_dict[upscaling_type], scale_factor_x, scale_factor_y]

    # Call deepRACIN
    onode = Node(lib.dR_Upscaling(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), us_dict[upscaling_type],
                                  c_int(scale_factor_x), c_int(scale_factor_y)),input_node.graph, desc, params)
    return onode

def Create_Labels(input_node):
    # type: (Node, str) -> Node
    # Description for python structures
    desc = 'LabelCreation'
    params = [2]

    # Call deepRACIN
    onode = Node(lib.dR_LabelCreation(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), 2,
                                      c_float(0.0), c_float(0.0), c_float(0.0)),input_node.graph, desc, params)
    return onode

def Normalization(input_node, normalization_type, target_mean=0.0, target_dev=1.0):
    # type: (Node, str, float, float) -> Node
    # Description for python structures
    desc = 'Normalization'
    params = [norm_dict[normalization_type], target_mean, target_dev]

    # Call deepRACIN
    onode = Node(lib.dR_Normalization(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), norm_dict[normalization_type], c_float(target_mean),
                                      c_float(target_dev)),input_node.graph, desc, params)
    return onode

def Pooling(input_node, pooling_type, shape, stride):
    # type: (Node, str, (int, int, int, int), (int, int, int, int)) -> Node
    # Description for python structures
    desc = 'Pooling'
    params = [pool_dict[pooling_type],shape[0],shape[1],shape[2],shape[3],stride[0],stride[1],stride[2],stride[3]]

    sh = Shape4(shape[0],shape[1],shape[2],shape[3])
    st = Shape4(stride[0],stride[1],stride[2],stride[3])
    # Call deepRACIN
    onode = Node(lib.dR_Pooling(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), pointer(sh), pointer(st),
                                pool_dict[pooling_type]),input_node.graph, desc, params)
    return onode

def Slice(input_node, origin, shape):
    # type: (Node, (int, int, int), (int, int, int)) -> Node
    dr_shape = shape
    dr_origin = origin
    if input_node.graph.layout == 'WHC':
        dr_shape = [shape[0],shape[1],shape[2],0]
        dr_origin = [origin[0],origin[1],origin[2],0]
    elif input_node.graph.layout == 'CHW':
        dr_shape = [shape[2],shape[1],shape[0],0]
        dr_origin = [origin[2],origin[1],origin[0],0]
    elif input_node.graph.layout == 'HWC':
        dr_shape = [shape[1],shape[0],shape[2],0]
        dr_origin = [origin[1],origin[0],origin[2],0]

    # Description for python structures
    desc = 'Slice'
    params = [dr_origin[0],dr_origin[1],dr_origin[2],dr_origin[3],dr_shape[0],dr_shape[1],dr_shape[2],dr_shape[3]]

    sh = Shape3(shape[0],shape[1],shape[2])
    orig = Shape3(origin[0],origin[1],origin[2])
    # Call deepRACIN
    onode = Node(lib.dR_Slice(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), pointer(orig), pointer(sh)),
                 input_node.graph, desc, params)
    return onode

def Crop_Or_Pad(input_node, shape):
    # type: (Node, (int, int, int)) -> Node
    dr_shape = shape
    if input_node.graph.layout == 'WHC':
        dr_shape = [shape[0],shape[1],shape[2],0]
    elif input_node.graph.layout == 'CHW':
        dr_shape = [shape[2],shape[1],shape[0],0]
    elif input_node.graph.layout == 'HWC':
        dr_shape = [shape[1],shape[0],shape[2],0]

    # Description for python structures
    desc = 'CropOrPad'
    params = [dr_shape[0],dr_shape[1],dr_shape[2]]

    sh = Shape3(shape[0],shape[1],shape[2])
    # Call deepRACIN
    onode = Node(lib.dR_CropOrPad(c_void_p(input_node.graph.ptr), c_void_p(input_node.ptr), pointer(sh)),input_node.graph, desc, params)
    return onode


def Concat(input_nodes,  concat_dim, layout='HWC'):
    # type: (list, int) -> Node
    n = len(input_nodes)
    if not n > 1:
        raise ValueError("DR Error: Concat with one or less nodes not allowed!")
    dr_dim = concat_dim
    graph = input_nodes[0].graph
    if graph.layout == 'WHC':
        dr_dim = [0, 1, 2][concat_dim]
    if graph.layout == 'CHW':
        dr_dim = [2, 1, 0][concat_dim]
    elif graph.layout == 'HWC':
        dr_dim = [1, 0, 2][concat_dim]

    nodeptr = (c_void_p * n)()
    for i in range(n):
        nodeptr[i] = input_nodes[i].ptr
        if input_nodes[i].graph != graph:
            raise ValueError("DR Error: Inputs for Concat are not in the same graph!")

    # Description for python structures
    desc = 'Concat'
    params = [n,dr_dim]

    # Call deepRACIN
    onode = Node(lib.dR_Concat(c_void_p(graph.ptr), nodeptr, n, dr_dim),graph, desc, params)
    return onode



# Functions for using an existing OpenCL context and existing feed/output buffers. Not supported in python interface.
'''

void dR_setClEnvironment(dR_Graph* net,
                                cl_context clcontext,
                                cl_platform_id clplatformid,
                                cl_command_queue clcommandqueue,
                                cl_device_id cldeviceid);

gboolean dR_setDataFeedNodeBuffer(dR_Graph* graph, dR_Node* feednode, cl_mem* clbuf);


gboolean dR_setNodeRoIBufferAndIndex(dR_Node* node, cl_mem* buf, gint index);


gboolean dR_setPreexistingOutputBuffer(dR_Graph* graph, dR_Node* node, cl_mem* buf);


gboolean dR_setNodeRoI(dR_Node* node, dR_Shape3 origin);
'''
